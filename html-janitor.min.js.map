{"version":3,"file":"html-janitor.min.js","mappings":"CAAA,SAAAA,EAAAC,GACA,kBAAAC,SAAAA,OAAAC,IACAD,OAAA,eAAAD,GACA,gBAAAG,SACAC,OAAAD,QAAAH,IAEAD,EAAAM,YAAAL,KAEAM,KAAA,WAEA,QAAAD,GAAAE,GACAD,KAAAC,OAAAA,EAKA,QAAAC,GAAAC,GACA,MAAA,KAAAC,EAAAC,QAAAF,EAAAG,UA2GA,QAAAC,GAAAJ,GACA,MAAAK,UAAAD,iBAAAJ,EACAM,WAAAC,UAAAD,WAAAE,aAAAF,WAAAG,cA/GA,GAAAR,IAAA,IAAA,KAAA,MAkHA,OA7GAL,GAAAc,UAAAC,MAAA,SAAAC,GACA,GAAAC,GAAAR,SAAAS,cAAA,MAKA,OAJAD,GAAAE,UAAAH,EAEAf,KAAAmB,UAAAH,GAEAA,EAAAE,WAGAnB,EAAAc,UAAAM,UAAA,SAAAC,GACA,GAAAC,GAAAd,EAAAa,GACAjB,EAAAkB,EAAAC,YACA,IAAAnB,EAEA,EAAA,CACA,GAAAG,GAAAH,EAAAG,SAAAiB,cACAC,EAAAxB,KAAAC,OAAAwB,KAAAnB,EAGA,KAAAH,EAAAuB,WAIA,GAAAvB,EAAAwB,WAAAC,KAAAC,UAAA,CAkBA,GAAA1B,EAAAwB,WAAAC,KAAAE,aAAA,CACAV,EAAAW,YAAA5B,GACAH,KAAAmB,UAAAC,EACA,OAGA,GACAY,GADAC,EAAA,MAAA3B,CAEA2B,KACAD,EAAAE,MAAArB,UAAAsB,KAAAC,KAAAjC,EAAAkC,WAAAnC,GAGA,IAAAoC,GAAAL,GAAAD,EAIAO,IAAAnB,EAAAA,WAGAoB,EACAtC,EAAAkB,IACAlB,EAAAC,IACAoC,CAIA,KAAAvC,KAAAC,OAAAwB,KAAAnB,IAAAgC,GAAAE,EAAA,CAEA,GAAA,WAAArC,EAAAG,UAAA,UAAAH,EAAAG,SACA,KAAAH,EAAAkC,WAAAI,OAAA,GACArB,EAAAsB,aAAAvC,EAAAkC,WAAA,GAAAlC,EAGAiB,GAAAW,YAAA5B,GAEAH,KAAAmB,UAAAC,EACA,OAIA,IAAA,GAAAuB,GAAA,EAAAA,EAAAxC,EAAAyC,WAAAH,OAAAE,GAAA,EAAA,CACA,GAAAE,GAAA1C,EAAAyC,WAAAD,GACAG,EAAAD,EAAAE,KAAAxB,cAGAyB,EAAAxB,EAAAsB,GACAG,GAAAD,EACAE,EAAAF,KAAA,GAAAH,EAAAM,QAAAH,GACAC,GAAAC,KACA/C,EAAAiD,gBAAAP,EAAAE,MAEAJ,GAAA,GAKA3C,KAAAmB,UAAAhB,GAGAA,EAAAuB,YAAA,MAvEA,IAAA,KAAAvB,EAAAkD,KAAAC,SACAnD,EAAAoD,wBAAArD,EAAAC,EAAAoD,yBACApD,EAAAqD,oBAAAtD,EAAAC,EAAAqD,qBAAA,CACApC,EAAAW,YAAA5B,GACAH,KAAAmB,UAAAC,EACA,cAmEAjB,EAAAkB,EAAAoC,gBAQA1D","sources":["../src/html-janitor.js"],"sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('html-janitor', factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.HTMLJanitor = factory();\n  }\n}(this, function () {\n\n  function HTMLJanitor(config) {\n    this.config = config;\n  }\n\n  // TODO: not exhaustive?\n  var blockElementNames = ['P', 'LI', 'DIV'];\n  function isBlockElement(node) {\n    return blockElementNames.indexOf(node.nodeName) !== -1;\n  }\n\n  HTMLJanitor.prototype.clean = function (html) {\n    var sandbox = document.createElement('div');\n    sandbox.innerHTML = html;\n\n    this._sanitize(sandbox);\n\n    return sandbox.innerHTML;\n  };\n\n  HTMLJanitor.prototype._sanitize = function (parentNode) {\n    var treeWalker = createTreeWalker(parentNode);\n    var node = treeWalker.firstChild();\n    if (!node) { return; }\n\n    do {\n      var nodeName = node.nodeName.toLowerCase();\n      var allowedAttrs = this.config.tags[nodeName];\n\n      // Ignore nodes that have already been sanitized\n      if (node._sanitized) {\n        continue;\n      }\n\n      if (node.nodeType === Node.TEXT_NODE) {\n        // If this text node is just whitespace and the previous or next element\n        // sibling is a block element, remove it\n        // N.B.: This heuristic could change. Very specific to a bug with\n        // `contenteditable` in Firefox: http://jsbin.com/EyuKase/1/edit?js,output\n        // FIXME: make this an option?\n        if (node.data.trim() === ''\n            && ((node.previousElementSibling && isBlockElement(node.previousElementSibling))\n                 || (node.nextElementSibling && isBlockElement(node.nextElementSibling)))) {\n          parentNode.removeChild(node);\n          this._sanitize(parentNode);\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      // Remove all comments\n      if (node.nodeType === Node.COMMENT_NODE) {\n        parentNode.removeChild(node);\n        this._sanitize(parentNode);\n        break;\n      }\n\n      var isInlineElement = nodeName === 'b';\n      var containsBlockElement;\n      if (isInlineElement) {\n        containsBlockElement = Array.prototype.some.call(node.childNodes, isBlockElement);\n      }\n\n      var isInvalid = isInlineElement && containsBlockElement;\n\n      // Block elements should not be nested (e.g. <li><p>...); if\n      // they are, we want to unwrap the inner block element.\n      var isNotTopContainer = !! parentNode.parentNode;\n      // TODO: Don't hardcore this â€” this is not invalid markup. Should be\n      // configurable.\n      var isNestedBlockElement =\n            isBlockElement(parentNode) &&\n            isBlockElement(node) &&\n            isNotTopContainer;\n\n      // Drop tag entirely according to the whitelist *and* if the markup\n      // is invalid.\n      if (!this.config.tags[nodeName] || isInvalid || isNestedBlockElement) {\n        // Do not keep the inner text of SCRIPT/STYLE elements.\n        if (! (node.nodeName === 'SCRIPT' || node.nodeName === 'STYLE')) {\n          while (node.childNodes.length > 0) {\n            parentNode.insertBefore(node.childNodes[0], node);\n          }\n        }\n        parentNode.removeChild(node);\n\n        this._sanitize(parentNode);\n        break;\n      }\n\n      // Sanitize attributes\n      for (var a = 0; a < node.attributes.length; a += 1) {\n        var attr = node.attributes[a];\n        var attrName = attr.name.toLowerCase();\n\n        // Allow attribute?\n        var allowedAttrValue = allowedAttrs[attrName];\n        var notInAttrList = ! allowedAttrValue;\n        var valueNotAllowed = allowedAttrValue !== true && attr.value !== allowedAttrValue;\n        if (notInAttrList || valueNotAllowed) {\n          node.removeAttribute(attr.name);\n          // Shift the array to continue looping.\n          a = a - 1;\n        }\n      }\n\n      // Sanitize children\n      this._sanitize(node);\n\n      // Mark node as sanitized so it's ignored in future runs\n      node._sanitized = true;\n    } while ((node = treeWalker.nextSibling()));\n  };\n\n  function createTreeWalker(node) {\n    return document.createTreeWalker(node,\n                                     NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT);\n  }\n\n  return HTMLJanitor;\n\n}));\n\n"],"names":["root","factory","define","amd","exports","module","HTMLJanitor","this","config","isBlockElement","node","blockElementNames","indexOf","nodeName","createTreeWalker","document","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","SHOW_COMMENT","prototype","clean","html","sandbox","createElement","innerHTML","_sanitize","parentNode","treeWalker","firstChild","toLowerCase","allowedAttrs","tags","_sanitized","nodeType","Node","TEXT_NODE","COMMENT_NODE","removeChild","containsBlockElement","isInlineElement","Array","some","call","childNodes","isInvalid","isNotTopContainer","isNestedBlockElement","length","insertBefore","a","attributes","attr","attrName","name","allowedAttrValue","notInAttrList","valueNotAllowed","value","removeAttribute","data","trim","previousElementSibling","nextElementSibling","nextSibling"]}